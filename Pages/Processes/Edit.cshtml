@page
@model ModuleManager.Pages.Processes.EditModel

@{
    ViewData["Title"] = "Edit";
}
<style>
    #builder button[type='submit'] {
        pointer-events: none;
    }
</style>

<link rel='stylesheet' href='https://cdn.form.io/formiojs/formio.full.min.css'>



<h4>Business Process</h4>
<hr />
<div>
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <form method="post">
        <div class="form-group">
            <input type="submit" value="Save" class="btn btn-primary" />
            <a asp-page="./Index">Back to List</a>
        </div>
        <div class="form-group row">
            <input type="hidden" asp-for="Process.ProcessId" />
            <div class="col-md-1"><label asp-for="Process.Name" class="control-label">
            </label></div>
            <div class="col-md-6"><input asp-for="Process.Name" class="form-control" />
            </div>
            <div class="col-md-5"><span asp-validation-for="Process.Name" class="text-danger"></span></div>
        </div>
        <div class="accordion">
            <h3>Process Details</h3>
            <div class="row">
                <div class="form-group">
                    <input type="hidden" asp-for="Process.Details" />
                    <span asp-validation-for="Process.Details" class="text-danger"></span>
                </div>
            <div id="builder" style=width:100%></div>
            </div>
            <h3>Required Process Components</h3>
            <div>
                <div class="form-group row">
                    <label>Drag to select and order the templates required by the design workflow</label>
                    <input type="hidden" asp-for="Process.RequiredModuleTemplates" />
                    <span asp-validation-for="Process.RequiredModuleTemplates" class="text-danger"></span>

                </div>
                    <input placeholder="search for a template" />
                <div class="row">
                    <div class="col-md-5 sortablescroller">
                    <ul class="sortablesource connectedSortable">
                        @foreach (var t in Model.Templates)
                        {
                            <li class="ui-state-default" data-value=@t.Value><span class="ui-icon ui-icon-arrowthick-2-n-s"></span>@t.Text</li>
                        }
                    </ul></div>
                    <div class="col-md-1 align-middle h-100 text-right"><i class="fa-solid fa-arrows-left-right"></i></div>
                    <div class="col-md-5 sortablescroller">
                    <ul class="sortabletarget connectedSortable">
                        @foreach (var t in Model.RequiredModuleTemplates)
                        {
                            <li class="ui-state-default" data-value=@t.Value><span class="ui-icon ui-icon-arrowthick-2-n-s"></span>@t.Text</li>
                        }
                    </ul>
                    </div>
                </div>
            </div>
        </div>
    </form>

</div>


@section Scripts {
    @{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
}

<script src='https://cdn.form.io/formiojs/formio.full.min.js'></script>
<script type='text/javascript'>
      function updateDetails(data){
          $("#Process_Details").val(JSON.stringify(data))
      }

    window.onload = function() {
      let dbdata=JSON.parse('@Html.Raw(Model.Process.Details)' ||'{}');
      let builder=Formio.builder(document.getElementById('builder'), dbdata, {noDefaultSubmitButton:true})
        .then((builder)=>{
          builder.on('saveComponent', function(e) {
              updateDetails(builder.schema);
          });
          builder.on('addComponent', function(e) {
              updateDetails(builder.schema);
          });
          builder.on('removeComponent', function(e) {
              updateDetails(builder.schema);
          });
          builder.on('updateComponent', function(e) {
              updateDetails(builder.schema);
          });
        });
        //jQueryUI sortable
      $( ".sortablesource, .sortabletarget" ).sortable({
        connectWith: ".connectedSortable",
        update:(event,ui)=>{
            let val=[];
            $(".sortabletarget li").each((i,el)=>{
                val.push(el.dataset["value"])
            });
            $("#Process_RequiredModuleTemplates").val(JSON.stringify(val));
        }
      }).disableSelection();
      //accordion
      $(".accordion").accordion();
    };
</script>
}
